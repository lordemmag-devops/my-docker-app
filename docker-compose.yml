services:

  web-blue:
    image: 471112825200.dkr.ecr.us-east-1.amazonaws.com/my-docker-app-frontend:latest
    networks:
      - app-net
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  api-blue:
    image: 471112825200.dkr.ecr.us-east-1.amazonaws.com/my-docker-app-backend:latest
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
    networks:
      - app-net
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
    secrets:
      - db-password
    healthcheck:
      test: ["CMD", "curl", "-f", "http://api-blue:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  web-green:
    image: 471112825200.dkr.ecr.us-east-1.amazonaws.com/my-docker-app-frontend:latest
    networks:
      - app-net
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  api-green:
    image: 471112825200.dkr.ecr.us-east-1.amazonaws.com/my-docker-app-backend:latest
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
    networks:
      - app-net
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
    secrets:
      - db-password
    healthcheck:
      test: ["CMD", "curl", "-f", "http://api-green:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  db:
    image: mongo:latest
    volumes:
      - db-data:/data/db
    networks:
      - app-net
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
    secrets:
      - db-password
  cache:
    image: redis:latest
    volumes:
      - cache-data:/data
    networks:
      - app-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  proxy-blue:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
    networks:
      - app-net
    depends_on:
      - web-blue
      - api-blue
    environment:
      - WEB_HOST=web-blue
      - API_HOST=api-blue
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  proxy-green:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "8081:80"
    networks:
      - app-net
    depends_on:
      - web-green
      - api-green
    environment:
      - WEB_HOST=web-green
      - API_HOST=api-green
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - app-net
    ports:
    - "9090:9090"
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    networks:
      - app-net
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana-admin-password
    secrets:
      - grafana-admin-password
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  app-net:
    driver: bridge

volumes:
  db-data:
  cache-data:
  grafana-data:

secrets:
  db-password:
    file: ./db-password.txt
  grafana-admin-password:
    file: ./grafana-admin-password.txt

# To deploy the stack, use:
# docker-compose -f docker-compose.yml up -d