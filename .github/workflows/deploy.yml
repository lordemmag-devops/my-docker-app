name: Deploy to EC2 Kubernetes with Blue-Green Strategy

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_BACKEND: my-docker-app-backend
  ECR_REPOSITORY_FRONTEND: my-docker-app-frontend

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      active_env: ${{ steps.check-env.outputs.active_env }}
      inactive_env: ${{ steps.check-env.outputs.inactive_env }}
    steps:
      - name: Determine active environment
        id: check-env
        run: |
          COMMIT_HASH=$(echo "${{ github.sha }}" | cut -c1-7)
          HASH_NUM=$(echo "$COMMIT_HASH" | tr -d 'a-f' | head -c1)
          
          if [ -z "$HASH_NUM" ]; then
            HASH_NUM=0
          fi
          
          if [ $((HASH_NUM % 2)) -eq 0 ]; then
            echo "active_env=blue" >> $GITHUB_OUTPUT
            echo "inactive_env=green" >> $GITHUB_OUTPUT
          else
            echo "active_env=green" >> $GITHUB_OUTPUT
            echo "inactive_env=blue" >> $GITHUB_OUTPUT
          fi

  build-and-deploy:
    needs: determine-environment
    runs-on: ubuntu-latest
    
    env:
      ACTIVE_ENV: ${{ needs.determine-environment.outputs.active_env }}
      INACTIVE_ENV: ${{ needs.determine-environment.outputs.inactive_env }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create ECR repositories if they don't exist
        run: |
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY_BACKEND || \
            aws ecr create-repository --repository-name $ECR_REPOSITORY_BACKEND
          
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY_FRONTEND || \
            aws ecr create-repository --repository-name $ECR_REPOSITORY_FRONTEND

      - name: Build and push Docker images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest ./backend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:${{ github.sha }} ./backend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:${{ github.sha }}
          
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest ./frontend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:${{ github.sha }} ./frontend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:${{ github.sha }}

      - name: Deploy to EC2 Kubernetes
        uses: appleboy/ssh-action@v1.0.3
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ACTIVE_ENV: ${{ env.ACTIVE_ENV }}
          INACTIVE_ENV: ${{ env.INACTIVE_ENV }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          GRAFANA_PASSWORD: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          timeout: 60s
          command_timeout: 900s
          envs: ECR_REGISTRY,ACTIVE_ENV,INACTIVE_ENV,DB_PASSWORD,GRAFANA_PASSWORD
          script: |
            set -e
            
            # Install kubectl if not present
            if ! command -v kubectl &> /dev/null; then
              curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
              chmod +x kubectl
              sudo mv kubectl /usr/local/bin/
            fi
            
            # Configure AWS CLI and ECR login
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws configure set default.region us-east-1
            
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
            
            # Clone/update repository
            REPO_DIR="/home/${{ secrets.SERVER_USERNAME }}/my-docker-app"
            if [ ! -d "$REPO_DIR" ]; then
              git clone https://github.com/lordemmag-devops/my-docker-app.git "$REPO_DIR"
            fi
            cd "$REPO_DIR"
            git pull origin master
            
            # Create namespace
            kubectl apply -f k8s/namespace.yaml
            
            # Create/update secrets
            kubectl create secret generic db-password \
              --from-literal=password="${DB_PASSWORD:-supersecret}" \
              --namespace=my-docker-app \
              --dry-run=client -o yaml | kubectl apply -f -
            
            kubectl create secret generic grafana-password \
              --from-literal=password="${GRAFANA_PASSWORD:-admin123}" \
              --namespace=my-docker-app \
              --dry-run=client -o yaml | kubectl apply -f -
            
            # Update image tags
            sed -i "s|471112825200.dkr.ecr.us-east-1.amazonaws.com/my-docker-app-backend:latest|$ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:${{ github.sha }}|g" k8s/backend.yaml
            sed -i "s|471112825200.dkr.ecr.us-east-1.amazonaws.com/my-docker-app-frontend:latest|$ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:${{ github.sha }}|g" k8s/frontend.yaml
            
            # Deploy infrastructure
            kubectl apply -f k8s/db.yaml -n my-docker-app
            kubectl apply -f k8s/cache.yaml -n my-docker-app
            kubectl apply -f k8s/monitoring.yaml -n my-docker-app
            
            # Wait for infrastructure
            kubectl wait --for=condition=available --timeout=300s deployment/db -n my-docker-app
            kubectl wait --for=condition=available --timeout=300s deployment/cache -n my-docker-app
            
            # Deploy application
            kubectl apply -f k8s/backend.yaml -n my-docker-app
            kubectl apply -f k8s/frontend.yaml -n my-docker-app
            
            # Scale up inactive environment
            kubectl scale deployment backend-$INACTIVE_ENV --replicas=2 -n my-docker-app
            kubectl scale deployment frontend-$INACTIVE_ENV --replicas=2 -n my-docker-app
            
            # Wait for deployment
            kubectl wait --for=condition=available --timeout=300s deployment/backend-$INACTIVE_ENV -n my-docker-app
            kubectl wait --for=condition=available --timeout=300s deployment/frontend-$INACTIVE_ENV -n my-docker-app
            
            # Health check
            BACKEND_POD=$(kubectl get pods -n my-docker-app -l app=backend,version=$INACTIVE_ENV -o jsonpath='{.items[0].metadata.name}')
            
            for i in {1..12}; do
              if kubectl exec -n my-docker-app $BACKEND_POD -- curl -f http://localhost:3000/health; then
                echo "Health check passed"
                break
              fi
              if [ $i -eq 12 ]; then
                echo "Health check failed"
                exit 1
              fi
              sleep 10
            done
            
            # Switch traffic
            kubectl patch service backend-active -n my-docker-app -p '{"spec":{"selector":{"version":"'$INACTIVE_ENV'"}}}'
            kubectl patch service frontend-active -n my-docker-app -p '{"spec":{"selector":{"version":"'$INACTIVE_ENV'"}}}'
            
            kubectl apply -f k8s/blue-green-switch.yaml -n my-docker-app
            kubectl apply -f k8s/ingress.yaml -n my-docker-app
            
            # Scale down old environment
            kubectl scale deployment backend-$ACTIVE_ENV --replicas=0 -n my-docker-app
            kubectl scale deployment frontend-$ACTIVE_ENV --replicas=0 -n my-docker-app
            
            echo "Deployment completed successfully!"
            kubectl get pods -n my-docker-app