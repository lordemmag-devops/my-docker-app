name: Deploy Blue-Green

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Determine active and inactive environments
        id: env
        run: |
          # This logic should ideally query your live infrastructure to see which color is active.
          # For this example, we'll alternate based on the run number.
          # This logic is simplified for demonstration. A real-world scenario might use a tag on a load balancer or a value in a config map.
          if [[ $(curl -s http://${{ secrets.SERVER_HOST }}/api/color) == "blue" ]]; then
            echo "ACTIVE_ENV=blue" >> $GITHUB_ENV
            echo "INACTIVE_ENV=green" >> $GITHUB_ENV
          else
            echo "ACTIVE_ENV=green" >> $GITHUB_ENV
            echo "INACTIVE_ENV=blue" >> $GITHUB_ENV
          fi

      - name: Build and push images for inactive environment
        run: |
          docker compose build base-node web-${{ env.INACTIVE_ENV }} api-${{ env.INACTIVE_ENV }} proxy-${{ env.INACTIVE_ENV }}
          docker compose push base-node web-${{ env.INACTIVE_ENV }} api-${{ env.INACTIVE_ENV }}

      - name: Deploy to server
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /path/to/my-docker-app
            git pull origin master
            export INACTIVE_ENV=${{ env.INACTIVE_ENV }}
            
            # Pull the latest images for the new deployment
            docker compose pull
            # Start the new inactive environment
            docker compose up -d web-${INACTIVE_ENV} api-${INACTIVE_ENV}
            
            # Robust health check with retry loop
            echo "Waiting for the new environment to become healthy..."
            for i in {1..10}; do
              # The -fs flag makes curl fail on HTTP status codes >= 400 and silences output
              if curl -fs http://localhost:${{ env.INACTIVE_ENV == 'blue' && 8081 || 8082 }}/; then
                echo "New environment is healthy!"
                break
              fi
              echo "Health check attempt $i failed. Retrying in 10 seconds..."
              sleep 10
            done
            # Final check - if the loop finished without success, exit
            curl -f http://localhost:${{ env.INACTIVE_ENV == 'blue' && 8081 || 8082 }}/ || (echo "Health check failed after multiple retries." && exit 1)
            
            # If tests pass, switch the proxy to the new environment
            docker compose up -d proxy-${INACTIVE_ENV}