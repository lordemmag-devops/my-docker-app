name: Deploy Blue-Green

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./  # Ensures commands run in project root
    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # Latest version
        with:
          submodules: recursive # Checkout submodules
          fetch-depth: 0  # Full history for clean builds

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3  # Latest

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Determine active and inactive environments
        id: env
        run: |
          echo "${{ secrets.SERVER_SSH_KEY }}" > private_key && chmod 600 private_key
          # Check which proxy is mapped to port 80 on the server to determine the active color.
          # Fallback to 'green' if the check fails (e.g., first deployment).
          if ssh -o StrictHostKeyChecking=no -i private_key ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} "docker ps --filter 'publish=80' --format '{{.Names}}' | grep -q 'blue'"; then
            echo "ACTIVE_ENV=blue" >> $GITHUB_ENV
            echo "INACTIVE_ENV=green" >> $GITHUB_ENV
          else
            echo "ACTIVE_ENV=green" >> $GITHUB_ENV
            echo "INACTIVE_ENV=blue" >> $GITHUB_ENV
          fi

      - name: Build and push images for inactive environment
        run: |
          INACTIVE_ENV=${{ env.INACTIVE_ENV }}
          echo "Building for inactive environment: $INACTIVE_ENV"
          docker compose build web-$INACTIVE_ENV api-$INACTIVE_ENV
          docker compose push web-$INACTIVE_ENV api-$INACTIVE_ENV

      - name: Deploy to server
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e # Exit immediately if a command exits with a non-zero status.
            cd /home/ubuntu/my-docker-app
            git pull origin master
            
            INACTIVE_ENV=${{ env.INACTIVE_ENV }}
            ACTIVE_ENV=${{ env.ACTIVE_ENV }}
            INACTIVE_PORT=$([ "$INACTIVE_ENV" == "blue" ] && echo 8081 || echo 8082)
            
            echo "--- Deploying to inactive environment: $INACTIVE_ENV on port $INACTIVE_PORT ---"
            docker compose pull web-$INACTIVE_ENV api-$INACTIVE_ENV
            docker compose build proxy-$INACTIVE_ENV # Build proxy locally on the server
            docker compose up -d --no-deps web-$INACTIVE_ENV api-$INACTIVE_ENV
            
            echo "--- Health check on inactive environment ---"
            for i in {1..12}; do
              if curl -fs "http://localhost:$INACTIVE_PORT/api/"; then
                echo "Health check passed! Switching traffic..."
                docker compose up -d --no-deps proxy-$INACTIVE_ENV
                docker compose stop proxy-$ACTIVE_ENV
                exit 0
              fi
              echo "Health check attempt $i failed. Retrying in 10s..."
              sleep 10
            done
            
            echo "Health check failed after multiple retries. Deployment aborted."
            exit 1
# Testing purpose