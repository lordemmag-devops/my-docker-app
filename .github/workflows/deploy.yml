name: Deploy Blue-Green

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./  # Ensures commands run in project root
    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # Latest version
        with:
          submodules: recursive # Checkout submodules
          fetch-depth: 0  # Full history for clean builds

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3  # Latest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Determine active and inactive environments
        id: env
        run: |
          echo "${{ secrets.SERVER_SSH_KEY }}" > private_key && chmod 600 private_key
          # Check which proxy is mapped to port 80 on the server to determine the active color.
          # Fallback to 'green' if the check fails (e.g., first deployment).
          if ssh -o StrictHostKeyChecking=no -i private_key ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} "docker ps --filter 'publish=80' --format '{{.Names}}' | grep -q 'blue'"; then
            echo "ACTIVE_ENV=blue" >> $GITHUB_ENV
            echo "INACTIVE_ENV=green" >> $GITHUB_ENV
          else
            echo "ACTIVE_ENV=green" >> $GITHUB_ENV
            echo "INACTIVE_ENV=blue" >> $GITHUB_ENV
          fi

      - name: Build, tag, and push images to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/my-docker-app-backend:$IMAGE_TAG ./backend
          docker build -t $ECR_REGISTRY/my-docker-app-frontend:$IMAGE_TAG ./frontend
          docker push $ECR_REGISTRY/my-docker-app-backend:$IMAGE_TAG
          docker push $ECR_REGISTRY/my-docker-app-frontend:$IMAGE_TAG
          docker tag $ECR_REGISTRY/my-docker-app-backend:$IMAGE_TAG $ECR_REGISTRY/my-docker-app-backend:latest
          docker tag $ECR_REGISTRY/my-docker-app-frontend:$IMAGE_TAG $ECR_REGISTRY/my-docker-app-frontend:latest
          docker push $ECR_REGISTRY/my-docker-app-backend:latest
          docker push $ECR_REGISTRY/my-docker-app-frontend:latest

      - name: Deploy to server
        uses: appleboy/ssh-action@v1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          AWS_REGION: us-east-1
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          envs: AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,ECR_REGISTRY,AWS_REGION
          script: |
            set -e # Exit immediately if a command exits with a non-zero status.
            if ! command -v aws &> /dev/null; then
              echo "AWS CLI not found. Installing..."
              sudo apt-get update -y
              sudo apt-get install -y unzip
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip -o awscliv2.zip
              sudo ./aws/install
              rm -rf awscliv2.zip aws
            fi
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
            cd /home/ubuntu/my-docker-app
            git pull origin master
            
            INACTIVE_ENV=${{ env.INACTIVE_ENV }}
            ACTIVE_ENV=${{ env.ACTIVE_ENV }}
            INACTIVE_PORT=$([ "$INACTIVE_ENV" == "blue" ] && echo 8081 || echo 8082)
            
            echo "--- Deploying to inactive environment: $INACTIVE_ENV on port $INACTIVE_PORT ---"
            docker compose pull
            docker compose build proxy-$INACTIVE_ENV # Build proxy locally on the server
            docker compose up -d --no-deps web-$INACTIVE_ENV api-$INACTIVE_ENV
            
            echo "--- Health check on inactive environment ---"
            for i in {1..12}; do
              if curl -fs "http://localhost:$INACTIVE_PORT/api/"; then
                echo "Health check passed! Switching traffic..."
                docker compose up -d --no-deps proxy-$INACTIVE_ENV
                docker compose stop proxy-$ACTIVE_ENV
                exit 0
              fi
              echo "Health check attempt $i failed. Retrying in 10s..."
              sleep 10
            done
            
            echo "Health check failed after multiple retries. Deployment aborted."
            exit 1
#
